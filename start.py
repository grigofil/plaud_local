#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Plaud Local —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import os
import subprocess
import sys
from pathlib import Path

def check_env():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API_AUTH_TOKEN")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API_AUTH_TOKEN
    with open(env_file, 'r', encoding='utf-8') as f:
        content = f.read()
        if 'API_AUTH_TOKEN=' in content:
            print("‚úÖ API_AUTH_TOKEN –Ω–∞–π–¥–µ–Ω –≤ .env")
        else:
            print("‚ö†Ô∏è  API_AUTH_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            print("   –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    return True

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker"""
    try:
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print("‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å docker-compose"""
    try:
        result = subprocess.run(['docker-compose', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print("‚ùå Docker Compose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def start_services():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    try:
        subprocess.run(['docker-compose', 'up', '-d'], check=True)
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
    try:
        subprocess.run(['docker-compose', 'ps'], check=True)
    except subprocess.CalledProcessError:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")

def main():
    print("=" * 50)
    print("üöÄ Plaud Local - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_env():
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª.")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if not check_docker():
        print("\n‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker.")
        sys.exit(1)
    
    if not check_docker_compose():
        print("\n‚ùå Docker Compose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose.")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    if start_services():
        show_status()
        print("\nüéâ Plaud Local –∑–∞–ø—É—â–µ–Ω!")
        print("\nüì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:8001")
        print("   ‚Ä¢ API: http://localhost:8000")
        print("   ‚Ä¢ –í–µ–±-–∫–ª–∏–µ–Ω—Ç: http://localhost:8000/app")
        print("\nüîë –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        print("   python test_auth.py http://localhost:8001 your_token_here")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
        sys.exit(1)

if __name__ == "__main__":
    main()

