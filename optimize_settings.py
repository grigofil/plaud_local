#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
from pathlib import Path

def create_optimized_env():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env
    env_file = Path('.env')
    if env_file.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        overwrite = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    optimized_settings = {
        'API_AUTH_TOKEN': 'your_secret_token_here',
        'REDIS_URL': 'redis://redis:6379',
        'DATA_DIR': '/data',
        'WHISPER_MODEL': 'small',
        'WHISPER_DEVICE': 'cpu',
        'WHISPER_COMPUTE_TYPE': 'int8',
        'WHISPER_FAST_MODE': 'true',
        'TRANSCRIBE_TIMEOUT': '600',
        'DEEPSEEK_API_KEY': 'your_deepseek_api_key_here',
        'DEEPSEEK_MODEL': 'deepseek-chat'
    }
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write("# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n")
        f.write("# –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º optimize_settings.py\n\n")
        
        for key, value in optimized_settings.items():
            f.write(f"{key}={value}\n")
    
    print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  WHISPER_MODEL: {optimized_settings['WHISPER_MODEL']} (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)")
    print(f"  WHISPER_FAST_MODE: {optimized_settings['WHISPER_FAST_MODE']} (–≤–∫–ª—é—á–µ–Ω)")
    print(f"  TRANSCRIBE_TIMEOUT: {optimized_settings['TRANSCRIBE_TIMEOUT']} (10 –º–∏–Ω—É—Ç)")
    
    print("\n‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
    print("  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API_AUTH_TOKEN")
    print("  2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DEEPSEEK_API_KEY (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)")

def show_current_settings():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    env_file = Path('.env')
    
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (.env):")
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                print(f"  {line}")

def show_performance_tips():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüöÄ –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print("\n1. –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏:")
    print("   WHISPER_MODEL=tiny")
    print("   WHISPER_FAST_MODE=true")
    print("   TRANSCRIBE_TIMEOUT=300")
    
    print("\n2. –î–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
    print("   WHISPER_MODEL=small")
    print("   WHISPER_FAST_MODE=true")
    print("   TRANSCRIBE_TIMEOUT=600")
    
    print("\n3. –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞:")
    print("   WHISPER_MODEL=medium")
    print("   WHISPER_FAST_MODE=false")
    print("   TRANSCRIBE_TIMEOUT=1200")
    
    print("\n4. –î–ª—è GPU —É—Å–∫–æ—Ä–µ–Ω–∏—è:")
    print("   WHISPER_DEVICE=cuda")
    print("   WHISPER_COMPUTE_TYPE=float16")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Plaud Local")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π .env")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("3. –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "1":
            create_optimized_env()
        elif choice == "2":
            show_current_settings()
        elif choice == "3":
            show_performance_tips()
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
