#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""

import os
import json
import time
from pathlib import Path
from redis import Redis
from rq import Queue, Worker, Connection
from rq.job import Job

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379")
DATA_DIR = Path(os.getenv("DATA_DIR", "/data"))

def get_redis_connection():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis"""
    return Redis.from_url(REDIS_URL)

def get_queue_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π"""
    r = get_redis_connection()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
    asr_queue = Queue("asr", connection=r)
    sum_queue = Queue("sum", connection=r)
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:")
    print(f"  ASR (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è): {len(asr_queue)} –∑–∞–¥–∞—á")
    print(f"  SUM (—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è): {len(sum_queue)} –∑–∞–¥–∞—á")
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã
    workers = Worker.all(connection=r)
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: {len(workers)}")
    
    for worker in workers:
        if worker.state == 'busy':
            current_job = worker.get_current_job()
            if current_job:
                print(f"    {worker.name}: {current_job.func_name} (ID: {current_job.id})")
        else:
            print(f"    {worker.name}: {worker.state}")

def show_job_details(job_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    r = get_redis_connection()
    job = Job.fetch(job_id, connection=r)
    
    print(f"\nüîç –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ {job_id}:")
    print(f"  –°—Ç–∞—Ç—É—Å: {job.get_status()}")
    print(f"  –§—É–Ω–∫—Ü–∏—è: {job.func_name}")
    print(f"  –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {job.args}")
    print(f"  –°–æ–∑–¥–∞–Ω–∞: {job.created_at}")
    print(f"  –ù–∞—á–∞—Ç–∞: {job.started_at}")
    print(f"  –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {job.ended_at}")
    
    if job.is_failed:
        print(f"  –û—à–∏–±–∫–∞: {job.exc_info}")
    
    if job.result:
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {job.result}")

def show_failed_jobs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    r = get_redis_connection()
    failed_jobs = Job.fetch_many(
        r.smembers('rq:queue:failed'), 
        connection=r
    )
    
    if not failed_jobs:
        print("‚úÖ –ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(failed_jobs)}):")
    for job in failed_jobs:
        if job:
            print(f"  {job.id}: {job.func_name} - {job.exc_info}")

def retry_failed_job(job_id):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –∑–∞–¥–∞—á—É"""
    r = get_redis_connection()
    job = Job.fetch(job_id, connection=r)
    
    if not job.is_failed:
        print(f"‚ùå –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ—É–¥–∞—á–Ω–æ–π")
        return
    
    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–¥–∞—á—É {job_id}...")
    job.requeue()
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ {job_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ")

def clear_failed_jobs():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    r = get_redis_connection()
    failed_jobs = r.smembers('rq:queue:failed')
    
    if not failed_jobs:
        print("‚úÖ –ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return
    
    print(f"üóëÔ∏è  –û—á–∏—â–∞—é {len(failed_jobs)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á...")
    for job_id in failed_jobs:
        job = Job.fetch(job_id.decode(), connection=r)
        job.delete()
    
    print("‚úÖ –í—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")

def show_job_files(job_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏"""
    job_dir = DATA_DIR / "jobs" / job_id
    
    if not job_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"\nüìÅ –§–∞–π–ª—ã –∑–∞–¥–∞—á–∏ {job_id}:")
    for file_path in job_dir.rglob("*"):
        if file_path.is_file():
            size = file_path.stat().st_size
            print(f"  {file_path.name}: {size} –±–∞–π—Ç")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ Plaud Local")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        print("4. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—É—é –∑–∞–¥–∞—á—É")
        print("5. –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        print("6. –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "1":
            get_queue_stats()
        elif choice == "2":
            job_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ").strip()
            if job_id:
                show_job_details(job_id)
        elif choice == "3":
            show_failed_jobs()
        elif choice == "4":
            job_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞: ").strip()
            if job_id:
                retry_failed_job(job_id)
        elif choice == "5":
            confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ").strip().lower()
            if confirm == 'y':
                clear_failed_jobs()
        elif choice == "6":
            job_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ").strip()
            if job_id:
                show_job_files(job_id)
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
