#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
from pathlib import Path

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "main.py",
        "api_main.py", 
        "transcribe_server.py",
        "start.py",
        "docker-compose.yml",
        "requirements.txt",
        "README.md",
        "Dockerfile",
        "src/__init__.py",
        "src/api/__init__.py",
        "src/api/main.py",
        "src/api/dependencies.py",
        "src/config/__init__.py",
        "src/config/settings.py",
        "src/core/__init__.py",
        "src/core/main.py",
        "src/models/__init__.py",
        "src/models/user.py",
        "src/services/__init__.py",
        "src/services/transcription_service.py",
        "src/services/user_service.py",
        "src/utils/__init__.py",
        "src/utils/auth.py",
        "src/utils/database.py",
        "src/tasks/__init__.py",
        "src/tasks/transcribe.py",
        "src/tasks/summarize.py",
        "src/workers/__init__.py",
        "src/workers/transcribe_server.py"
    ]
    
    success = True
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            success = False
    
    return success

def check_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    required_dirs = [
        "src",
        "src/api",
        "src/config", 
        "src/core",
        "src/models",
        "src/services",
        "src/utils",
        "src/tasks",
        "src/workers",
        "api/static"
    ]
    
    success = True
    for dir_path in required_dirs:
        if Path(dir_path).exists() and Path(dir_path).is_dir():
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ùå {dir_path}/ - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            success = False
    
    return success

def check_python_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤"""
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")
    
    python_files = []
    for root, _, files in os.walk("src"):
        for file in files:
            if file.endswith(".py"):
                python_files.append(Path(root) / file)
    
    success = True
    for py_file in python_files:
        try:
            # Try to compile the file to check syntax
            with open(py_file, "r", encoding="utf-8") as f:
                compile(f.read(), str(py_file), "exec")
            print(f"‚úÖ {py_file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK")
        except SyntaxError as e:
            print(f"‚ùå {py_file} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
            success = False
        except Exception as e:
            print(f"‚ö†Ô∏è  {py_file} - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
    
    return success

def check_import_paths():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # Check that main files can resolve src imports
    main_files = ["main.py", "api_main.py", "transcribe_server.py"]
    
    success = True
    for main_file in main_files:
        try:
            with open(main_file, "r", encoding="utf-8") as f:
                content = f.read()
                if "sys.path.insert(0, str(src_dir))" in content:
                    print(f"‚úÖ {main_file} - –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                else:
                    print(f"‚ùå {main_file} - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")
                    success = False
        except Exception as e:
            print(f"‚ö†Ô∏è  {main_file} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    return success

def main():
    print("=" * 60)
    print("üß™ Plaud Local - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 60)
    
    success = True
    
    # Run tests
    success &= check_file_structure()
    success &= check_directory_structure() 
    success &= check_python_syntax()
    success &= check_import_paths()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –º–µ—Å—Ç–µ")
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("‚úÖ –ü—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
    
    print("=" * 60)
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)